1. dice_sketch Как сделать чтобы кубики выводились рядом? можно заключить каждый кубик в список,
но тогда не работают управляющие конструкции \n

SG: Я бы пока не заморачивался с отрисовкой именно точек, а сосредоточился на логике и выводил просто |1| |2| |3| |4| |5| |6|. При этом предусмотрел бы возможность замены отрисовки.

2. Я взял отрисовку кубиков по твоей наводке
я не разобрался как работают этого типа конструкции C[r<1], можешь пояснить?
    SG: конструкция вида C[r<1] работает следующим образом:
        1. r < 1 - возвращает bool = True или False
        2. При использовании в квадратных скобках, происходит приведение к int: Using int() method will convert Boolean to Int, 1 for True and 0 for False.
        3. В итоге получаем одно из двух значений: 0 или 1, которые используются при получении соответствующего символа из строки "o " (0=точка, 1=пустота - пробел)

from random import*
r=randrange(6)
C='o '
s='-----\n|'+C[r<1]+' '+C[r<3]+'|\n|'+C[r<5]
print s+C[r&1]+s[::-1]



3. в функции  start_menu_game у меня не получилось изменять переменную base_kit на глобальном уровне,
пришлось сделать через костыли, подскажи как менять в if значения сразу везде?
    SG: Не очень понимаю о чём речь. Если речь про место, где вызывается функция change_base_dice()
            # base_kit = change_base_dice(base_kit)
        то значение меняется. Если речь про то, чтобы сделать base_kit глобальным, то это плохая идея.
        ЗЫ: Я бы рекомендовал в данном случае назвать функцию не change_base_dice, а def change_kit(kit: list). Тогда её вызов был бы change_kit(base_kit)

4. Я не доработал с подсчетом результатов нескольких игр, у меня только одну играет.
мне кажется нужно в start_new_game добавлять цикл, пока не наберется нужное количество очнов.
что ты скажешь?
     SG: Да, похоже на правду. Стоит так же понять где должен быть массив со счётчиком очков.
        Если говорить чуть более глобально, то, наверное, стоило бы провести небольшой рефакторинг с разбивкой игры на этапы:
        1. Партия до 100 очков
        2. Одна игра
        3. Каждая итерация хода (бросок)
